name: api-ci-cd

on:
  #push:
  #  branches:
  #    - main
  #  paths:
  #    - 'api/**'  
  workflow_dispatch:
    
jobs:
  build:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./api
    outputs:
      RELEASE_VERSION: ${{ steps.version.outputs.RELEASE_VERSION }}
      RELEASE_NAME: ${{ steps.version.outputs.RELEASE_NAME }}
      RELEASE_FILE_NAME: ${{ steps.version.outputs.RELEASE_FILE_NAME }}
    
    steps:
      - uses: actions/checkout@v2
        
      - name: Validate deployment template(s)
        run: |
          az bicep build --file ../scripts/deployment-rg.bicep
          az bicep build --file ../scripts/deployment-uat.bicep
        
      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: 16
          registry-url: https://npm.pkg.github.com
          
      - name: Restore all project dependencies
        run: npm install
      
      - name: Figure out the next package version
        id: version
        run: |
          VERSION=""        
          VERSION_REPO=$(../scripts/ver/get_version_repo.sh -o martinabrle -r mini-node -p mini-node-api)
          VERSION_NODE=$(../scripts/ver/get_version_node.sh -f ./package.json)

          RETVAL_VER_COMP=$(../scripts/ver/version_compare.sh "${VERSION_REPO}" "${VERSION_NODE}")

          if [ "$RETVAL_VER_COMP" == 0 ] || [ "$RETVAL_VER_COMP" == 1 ]; then
              VERSION=$(../scripts/ver/increase_version.sh -v "$VERSION_REPO")
              ../scripts/ver/update_version_node.sh -f ./package.json -v "$VERSION"
          elif [ "$RETVAL_VER_COMP" == -1 ]; then
              VERSION="$VERSION_NODE"
          else
              echo "Error: unexpected value returned by version_compare.sh"
              exit 1
          fi

          echo "::set-output name=RELEASE_VERSION::${VERSION}"
          echo "::set-output name=RELEASE_NAME::mini-node-api-v${VERSION}"
          echo "::set-output name=RELEASE_FILE_NAME::mini-node-api-v${VERSION}.zip"

      - name: Display next version
        run: |
          echo "Version: ${{ steps.version.outputs.RELEASE_VERSION }}"
          echo "Release name: ${{ steps.version.outputs.RELEASE_NAME }}"
          echo "Release file name: ${{ steps.version.outputs.RELEASE_FILE_NAME }}"

      - name: Build and validate
        run: npm run build
      
      - name: Run unit tests
        run: npm run test
      
      - name: Remove test artifacts
        run: |
          rm -rf node_modules
          npm install --production
      
      - name: Copy scripts to API to have it all bundled
        run: |
          cp -rf ../scripts ./
      
      - name: Create an application archive
        run: |
         zip -r -q -m "${{ steps.version.outputs.RELEASE_FILE_NAME }}" .
      
      - name: 'Upload build artifact'
        uses: actions/upload-artifact@v2
        with:
          name: ${{ steps.version.outputs.RELEASE_NAME }}
          path: ./api/${{ steps.version.outputs.RELEASE_FILE_NAME }}
          retention-days: 5
      
  deploy:
    needs: build
    runs-on: ubuntu-latest
    steps:
    
      - name: Download build artefacts
        uses: actions/download-artifact@v2
        with:
          name: ${{needs.build.outputs.RELEASE_NAME}}
      
      - name: Unpack deployment
        run: unzip "./${{needs.build.outputs.RELEASE_FILE_NAME}}"
      
      - name: Check downloaded files
        run: |
          pwd
          ls -la
          pwd
          ls -la ./scripts/
      
      - name: Azure login
        uses: azure/login@v1
        with:
          creds: ${{ secrets.AZURE_UAT_CREDENTIALS }}

      - name: Set default Azure subscription
        run: az account set -s ${{ secrets.AZURE_UAT_SUBSCRIPTION_ID }}
      
      - name: Create Azure resource group
        run: |
             az deployment sub create \
              --location ${{ secrets.AZURE_UAT_LOCATION }} \
              --template-file ./scripts/deployment-rg.bicep \
              --parameters name=${{ secrets.AZURE_UAT_RESOURCE_GROUP }}

      - name: Deploy Azure resources
        run: |
             az deployment group create \
              --resource-group ${{ secrets.AZURE_UAT_RESOURCE_GROUP }}  \
              --template-file ./scripts/deployment-uat.bicep  \
              --parameters \
                    dbServerDomain=postgres.database.azure.com  \
                    dbServerName=${{ secrets.AZURE_UAT_DB_SERVER_NAME }}  \
                    dbServerPort=${{ secrets.AZURE_UAT_DB_SERVER_PORT }}  \
                    dbName=${{ secrets.AZURE_UAT_DB_NAME }} \
                    dbServerLogin=${{ secrets.AZURE_UAT_DB_SERVER_LOGIN }} \
                    dbServerPassword=${{ secrets.AZURE_UAT_DB_SERVER_LOGIN_PASSWORD }} \
                    apiServiceName=${{ secrets.AZURE_UAT_API_SERVICE_NAME }} \
                    appServicePort=${{ secrets.AZURE_UAT_API_SERVICE_PORT }} \
                    webServiceName=${{ secrets.AZURE_UAT_WEB_SERVICE_NAME }} \
                    webServicePort=${{ secrets.AZURE_UAT_WEB_SERVICE_PORT }}

      - name: Create DB if it does not exist
        run: |
          export PGPASSWORD=${{ secrets.AZURE_UAT_DB_SERVER_LOGIN_PASSWORD }}
          psql --host=${{ secrets.AZURE_UAT_DB_SERVER_NAME }}.postgres.database.azure.com --port=${{ secrets.AZURE_UAT_DB_SERVER_PORT }} --username=${{ secrets.AZURE_UAT_DB_SERVER_LOGIN }}@${{ secrets.AZURE_UAT_DB_SERVER_NAME }} --no-password --dbname=postgres -tc "SELECT 1 FROM pg_database WHERE datname = '${{ secrets.AZURE_UAT_DB_NAME }}'" | grep -q 1 || psql --host=${{ secrets.AZURE_UAT_DB_SERVER_NAME }}.postgres.database.azure.com --port=${{ secrets.AZURE_UAT_DB_SERVER_PORT }} --username=${{ secrets.AZURE_UAT_DB_SERVER_LOGIN }}@${{ secrets.AZURE_UAT_DB_SERVER_NAME }} --no-password  --dbname=postgres -c "CREATE DATABASE ${{ secrets.AZURE_UAT_DB_NAME }};"
        
      - name: Run DB scripts
        run: |
          export PGPASSWORD=${{ secrets.AZURE_UAT_DB_SERVER_LOGIN_PASSWORD }}
          psql --host=${{ secrets.AZURE_UAT_DB_SERVER_NAME }}.postgres.database.azure.com --port=${{ secrets.AZURE_UAT_DB_SERVER_PORT }} --username=${{ secrets.AZURE_UAT_DB_SERVER_LOGIN }}@${{ secrets.AZURE_UAT_DB_SERVER_NAME }} --no-password --dbname=${{ secrets.AZURE_UAT_DB_NAME }} --file=./scripts/db.sql
          
      - name: Deploy to AppService
        uses: azure/webapps-deploy@v2
        with:
          app-name: "${{ secrets.AZURE_UAT_APP_SERVICE_NAME }}"
          package: "${{ needs.build.outputs.RELEASE_FILE_NAME }}"
      
      - name: Run integration test(s)
        run: |
          echo "Run integration tests...."
      
      - name: Release
        uses: softprops/action-gh-release@v1
        with:
          name: ${{ needs.build.outputs.RELEASE_FILE_NAME }}
          tag_name: ${{ needs.build.outputs.RELEASE_NAME }}
          files: "./express-postgresql-app/${{ needs.build.outputs.RELEASE_FILE_NAME }}"
          token: ${{ secrets.PAT_TOKEN }} # To trigger other workflows
